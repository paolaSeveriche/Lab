@page "/dataSamples"
@using Lab.WEB.Repositories;
@using Lab.Shared.Entities;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@*@attribute [Authorize(Roles ="Admin")] 
<!--Para proteger la página-->

<!--Protegida por el atributo nombre-->
@attribute [Authorize(Roles = "Admin")]*@

@inject IRepository repository

<h1>Dato De La Muestra en Campo</h1>


<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/dataSamples/create">Nueva Muestra</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Buscar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>

<GenericList MyList="DataSamples">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>

                    <th></th>
                    <th style="width:220px">Fecha de Recolección</th>
                    <th style="width:300px">Fecha de Ingreso</th>
                    <th style="width:300px">Hora</th>
                    <th style="width:300px">Nombre de Recolector</th>
                    <th style="width:300px">Temperatura de ingreso</th>
                    <th style="width:300px">Tipo Frasco</th>
                    <th style="width:300px">Cantidad</th>
                    <th style="width:300px">Color</th>
                    <th style="width:300px">Olor</th>
                    <th style="width:300px">Aspecto</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dataSample in DataSamples!)
                {
                    <tr>

                        <td>
                            @dataSample.CollectorDate
                        </td>
                        <td>
                            @dataSample.AdmissionDate
                        </td>
                        <td>
                            @dataSample.Hours
                        </td>
                        <td>
                            @dataSample.NameR
                        </td>
                        <td>
                            @dataSample.temperature
                        </td>
                        <td>
                            @dataSample.RecentType
                        </td>
                        <td>
                            @dataSample.Amount
                        </td>
                        <td>
                            @dataSample.Color
                        </td>
                        <td>
                            @dataSample.Smell
                        </td>
                        <td>
                            @dataSample.Aspect
                        </td>
                        <!--Aca se cambio el  orden del botón -->
                        <td>
                            @*<a href="/dataSamples/details/@dataSample.Id" class="btn btn-info">Detalles</a>*@
                            <a href="/dataSamples/edit/@dataSample.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(dataSample))>Borrar</button>

                        </td>
              
                    </tr>
                }
            </tbody>
        </table>

        <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPage" />

    </Body>

</GenericList>

@code {

    public List<DataSample>? DataSamples { get; set; }
    // Codigo de paginación
    private int currentPage = 1;
    private int totalPages;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";




    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }


    private async Task Load(int page = 1) // inicio de la pagina
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/dataSamples?page={page}";
            url2 = $"api/dataSamples/totalPages";
        }
        else
        {
            url1 = $"api/dataSamples?page={page}&filter={Filter}";
            url2 = $"api/dataSamples/totalPages?filter={Filter}";
        }



        var responseHppt = await repository.Get<List<DataSample>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        DataSamples = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }


    private async Task Delete(DataSample dataSample)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/dataSamples/{dataSample.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await Load(page);
        await SelectedPage(page);
    }

}
