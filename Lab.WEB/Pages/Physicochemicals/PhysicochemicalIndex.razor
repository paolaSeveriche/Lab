@page "/physicochemicals"
@using System.Net;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

@inject IRepository repository

<h3>Muestra</h3>
<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/physicochemical/create">Nueva Muestra</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Muestra..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Buscar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>
<GenericList MyList="Physicochemicals">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ResidualChlorine</th>
                    <th>Irca</th>
                    <th>Turbidity</th>
                    <th>PH</th>
                    <th>CollectorDate</th>
                    <th>AdmissionDate</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var physicochemical in Physicochemicals!)
                {
                    <tr>
                        <td>
                            @physicochemical.ResidualChlorine
                        </td>
                        <td>
                            @physicochemical.Irca
                        </td>
                        <td>
                            @physicochemical.Turbidity
                        </td>
                        <td>
                            @physicochemical.Ph
                        </td>
                        <td>
                            @physicochemical.CollectorDate
                        </td>
                        <td>
                            @physicochemical.AdmissionDate
                        </td>
                        <td>
                            <a href="/physicochemicals/edit/@physicochemical.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(physicochemical))>Borrar</button>
                        </td>
                        +
                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>

@code {

    public List<Physicochemical>? Physicochemicals { get; set; }
    // Codigo de paginación
    private int currentPage = 1;
    private int totalPages;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";




    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }


    private async Task Load(int page = 1) // inicio de la pagina
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/physicochemicals?page={page}";
            url2 = $"api/physicochemicals/totalPages";
        }
        else
        {
            url1 = $"api/physicochemicals?page={page}&filter={Filter}";
            url2 = $"api/physicochemicals/totalPages?filter={Filter}";
        }



        var responseHppt = await repository.Get<List<Physicochemical>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Physicochemicals = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }


    private async Task Delete(Physicochemical physicochemical)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/physicochemicals/{physicochemical.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await Load(page);
        await SelectedPage(page);
    }

}