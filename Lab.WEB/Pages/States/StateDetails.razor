@page "/states/details/{StateId:int}"
@using System.Net;
@using Lab.Shared.Entities;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (state is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@state.Name</h3>
    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        <div>
            <a class="btn btn-primary" href="/state/create/@state.Id">Nueva Estado</a>
            <a class="btn btn-success" href="/countries/details/@state.CountryId">Regresar</a>

        </div>
        <div class="mx-2">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Buscar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
        </div>
    </div>


    <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />


    <GenericList MyList="cities">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ciudad</th>
                        <th style="width:220px">Ciudades</th> <!--nuevo-->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in cities!)
                    {
                        <tr>
                            <td>
                                @city.Name
                            </td>
                            <td>
                                <a class="btn btn-warning" href="/cities/edit/@city.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(city.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private State? state;
    private List<City>? cities { get; set; }

    private int currentPage = 1; //nuevo
    private int totalPages;

    [Parameter]
    public int StateId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task SelectedPage(int page) //nuevo
    {
        currentPage = page;
        await Load(page);
    }

    private async Task Load(int page = 1)
    {

        if (!string.IsNullOrWhiteSpace(Page))//nuevo
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/cities?page={page}&StateId={StateId}";
            url2 = $"api/cities/totalPages?StateId={StateId}";
        }
        else
        {
            url1 = $"api/cities?page={page}&filter={Filter}&StateId={StateId}";
            url2 = $"api/cities/totalPages?filter={Filter}&StateId={StateId}";
        }

        //---

        var responseHttp = await repository.Get<State>($"/api/states/{StateId}");
        var responseHppt = await repository.Get<List<City>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);


        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHppt.Response!.ToList();
        totalPages = responseHppt2.Response!;
        state = responseHttp.Response;

    }

    private async Task DeleteAsync(int cityId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/cities/{cityId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await Load();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await Load(page);
        await SelectedPage(page);
    }
}

